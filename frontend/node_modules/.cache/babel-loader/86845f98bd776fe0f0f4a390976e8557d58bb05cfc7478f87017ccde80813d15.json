{"ast":null,"code":"import axios from 'axios';\n\n// Monday.com API configuration\nconst API_TOKEN = process.env.REACT_APP_MONDAY_API_TOKEN;\nconst BOARD_ID = process.env.REACT_APP_MONDAY_BOARD_ID || '2038576678';\nconst API_URL = 'https://api.monday.com/v2';\n\n// Debug environment variables\nconsole.log('Environment variables:', {\n  REACT_APP_MONDAY_API_TOKEN: process.env.REACT_APP_MONDAY_API_TOKEN ? 'SET' : 'NOT SET',\n  REACT_APP_MONDAY_BOARD_ID: process.env.REACT_APP_MONDAY_BOARD_ID || 'NOT SET'\n});\n\n// Validate that API token is available\nif (!API_TOKEN) {\n  throw new Error('REACT_APP_MONDAY_API_TOKEN environment variable is required');\n}\nconst headers = {\n  'Authorization': API_TOKEN,\n  'Content-Type': 'application/json',\n  'API-Version': '2024-01'\n};\n// Fetch board columns to understand the structure\nexport async function fetchBoardColumns() {\n  const query = `\n    query {\n      boards(ids: ${BOARD_ID}) {\n        columns {\n          id\n          title\n          type\n        }\n      }\n    }\n  `;\n  try {\n    console.log('Making API call to Monday.com with headers:', headers);\n    const response = await axios.post(API_URL, {\n      query\n    }, {\n      headers\n    });\n    console.log('API response received:', response.status);\n    return response.data.data.boards[0].columns;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching board columns:', error);\n    console.error('Error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    return [];\n  }\n}\n\n// Fetch all items from the board\nexport async function fetchBoardItems() {\n  const query = `\n    query {\n      boards(ids: ${BOARD_ID}) {\n        items {\n          id\n          name\n          column_values {\n            id\n            text\n            value\n            type\n          }\n          subitems {\n            id\n            name\n            column_values {\n              id\n              text\n              value\n              type\n            }\n          }\n        }\n      }\n    }\n  `;\n  try {\n    const response = await axios.post(API_URL, {\n      query\n    }, {\n      headers\n    });\n    return response.data.data.boards[0].items;\n  } catch (error) {\n    console.error('Error fetching board items:', error);\n    return [];\n  }\n}\n\n// Parse column values to extract effort, assignee, status, and due date\nfunction parseColumnValues(columnValues) {\n  let effort = 0;\n  let assignee = '';\n  let status = '';\n  let dueDate = '';\n  columnValues.forEach(col => {\n    if (col.id === 'numeric_mksee97s' && col.text) {\n      // Effort (hours) column\n      const effortValue = parseFloat(col.text);\n      if (!isNaN(effortValue)) {\n        effort = effortValue;\n      }\n    }\n    if (col.id === 'person' && col.value) {\n      // Assigned To (people) column\n      try {\n        const parsed = JSON.parse(col.value);\n        if (parsed && parsed.personsAndTeams && parsed.personsAndTeams.length > 0) {\n          // Use the first person assigned (or you can join names for multiple assignees)\n          assignee = parsed.personsAndTeams[0].name;\n        }\n      } catch (e) {\n        // fallback\n        assignee = col.text || '';\n      }\n    }\n    if (col.id === 'status' && col.text) {\n      status = col.text;\n    }\n    if (col.id === 'date4' && col.text) {\n      dueDate = col.text;\n    }\n  });\n  return {\n    effort,\n    assignee,\n    status,\n    dueDate\n  };\n}\n\n// Convert Monday.com items to our Task interface\nexport async function fetchTasks() {\n  // Fetch all groups first to get valid group IDs\n  const groupQuery = `query { boards(ids: ${BOARD_ID}) { groups { id } } }`;\n  let validGroupIds = [];\n  try {\n    const groupRes = await axios.post(API_URL, {\n      query: groupQuery\n    }, {\n      headers\n    });\n    validGroupIds = groupRes.data.data.boards[0].groups.map(g => g.id);\n  } catch (e) {\n    // fallback: no group validation\n  }\n  const query = `\n    query {\n      boards(ids: ${BOARD_ID}) {\n        items_page {\n          items {\n            id\n            name\n            group { id }\n            column_values {\n              id\n              text\n              value\n              type\n            }\n            subitems {\n              id\n              name\n              group { id }\n              column_values {\n                id\n                text\n                value\n                type\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n  try {\n    const response = await axios.post(API_URL, {\n      query\n    }, {\n      headers\n    });\n    const items = response.data.data.boards[0].items_page.items;\n    const tasks = [];\n    items.forEach(item => {\n      // Find subitems with valid effort and assignee\n      const validSubitems = (Array.isArray(item.subitems) ? item.subitems : []).filter(subitem => {\n        let effort = 0;\n        let assignee = '';\n        subitem.column_values.forEach(col => {\n          if (col.id === 'numeric_mksezpbh' && col.text) {\n            const val = parseFloat(col.text);\n            if (!isNaN(val)) effort = val;\n          }\n          if (col.id === 'person' && col.text) {\n            assignee = col.text;\n          }\n        });\n        return effort > 0 && assignee;\n      });\n      if (validSubitems.length > 0) {\n        // Only count valid subitems, ignore main item effort\n        validSubitems.forEach(subitem => {\n          var _subitem$group, _item$group;\n          let effort = 0;\n          let assignee = '';\n          let status = '';\n          let dueDate = '';\n          subitem.column_values.forEach(col => {\n            if (col.id === 'numeric_mksezpbh' && col.text) {\n              const val = parseFloat(col.text);\n              if (!isNaN(val)) effort = val;\n            }\n            if (col.id === 'person' && col.text) {\n              assignee = col.text;\n            }\n            if (col.id === 'status' && col.text) {\n              status = col.text;\n            }\n            if (col.id.startsWith('date') && col.text) {\n              dueDate = col.text;\n            }\n          });\n          // Subitem inherits parent group if missing or invalid\n          let groupId = ((_subitem$group = subitem.group) === null || _subitem$group === void 0 ? void 0 : _subitem$group.id) || ((_item$group = item.group) === null || _item$group === void 0 ? void 0 : _item$group.id) || '';\n          if (!validGroupIds.includes(groupId)) {\n            var _item$group2;\n            groupId = ((_item$group2 = item.group) === null || _item$group2 === void 0 ? void 0 : _item$group2.id) || '';\n          }\n          if (effort > 0 && assignee) {\n            tasks.push({\n              id: subitem.id,\n              name: subitem.name,\n              effort,\n              assignee,\n              status,\n              dueDate,\n              isSubitem: true,\n              parentId: item.id,\n              groupId\n            });\n          }\n        });\n      } else {\n        // No valid subitems, use main item effort\n        let effort = 0;\n        let assignee = '';\n        let status = '';\n        let dueDate = '';\n        item.column_values.forEach(col => {\n          if (col.id === 'numeric_mksee97s' && col.text) {\n            const val = parseFloat(col.text);\n            if (!isNaN(val)) effort = val;\n          }\n          if (col.id === 'person' && col.text) {\n            assignee = col.text;\n          }\n          if (col.id === 'status' && col.text) {\n            status = col.text;\n          }\n          if (col.id === 'date4' && col.text) {\n            dueDate = col.text;\n          }\n        });\n        if (effort > 0 && assignee) {\n          var _item$group3;\n          tasks.push({\n            id: item.id,\n            name: item.name,\n            effort,\n            assignee,\n            status,\n            dueDate,\n            isSubitem: false,\n            groupId: ((_item$group3 = item.group) === null || _item$group3 === void 0 ? void 0 : _item$group3.id) || ''\n          });\n        }\n      }\n    });\n    // Debug: print all extracted tasks\n    console.log('Extracted tasks:', JSON.stringify(tasks, null, 2));\n    return tasks;\n  } catch (error) {\n    console.error('Error fetching tasks:', error);\n    return [];\n  }\n}\nexport async function fetchGroups() {\n  const query = `\n    query {\n      boards(ids: ${BOARD_ID}) {\n        groups {\n          id\n          title\n        }\n      }\n    }\n  `;\n  try {\n    console.log('Making API call to fetch groups with headers:', headers);\n    const response = await axios.post(API_URL, {\n      query\n    }, {\n      headers\n    });\n    console.log('Groups API response received:', response.status);\n    return response.data.data.boards[0].groups;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error fetching groups:', error);\n    console.error('Error details:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    return [];\n  }\n}","map":{"version":3,"names":["axios","API_TOKEN","process","env","REACT_APP_MONDAY_API_TOKEN","BOARD_ID","REACT_APP_MONDAY_BOARD_ID","API_URL","console","log","Error","headers","fetchBoardColumns","query","response","post","status","data","boards","columns","error","_error$response","message","fetchBoardItems","items","parseColumnValues","columnValues","effort","assignee","dueDate","forEach","col","id","text","effortValue","parseFloat","isNaN","value","parsed","JSON","parse","personsAndTeams","length","name","e","fetchTasks","groupQuery","validGroupIds","groupRes","groups","map","g","items_page","tasks","item","validSubitems","Array","isArray","subitems","filter","subitem","column_values","val","_subitem$group","_item$group","startsWith","groupId","group","includes","_item$group2","push","isSubitem","parentId","_item$group3","stringify","fetchGroups","_error$response2"],"sources":["C:/Users/FredrikHelander/monday-workload-app/frontend/src/api/monday.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Monday.com API configuration\r\nconst API_TOKEN = process.env.REACT_APP_MONDAY_API_TOKEN;\r\nconst BOARD_ID = process.env.REACT_APP_MONDAY_BOARD_ID || '2038576678';\r\nconst API_URL = 'https://api.monday.com/v2';\r\n\r\n// Debug environment variables\r\nconsole.log('Environment variables:', {\r\n  REACT_APP_MONDAY_API_TOKEN: process.env.REACT_APP_MONDAY_API_TOKEN ? 'SET' : 'NOT SET',\r\n  REACT_APP_MONDAY_BOARD_ID: process.env.REACT_APP_MONDAY_BOARD_ID || 'NOT SET'\r\n});\r\n\r\n// Validate that API token is available\r\nif (!API_TOKEN) {\r\n  throw new Error('REACT_APP_MONDAY_API_TOKEN environment variable is required');\r\n}\r\n\r\nconst headers = {\r\n  'Authorization': API_TOKEN,\r\n  'Content-Type': 'application/json',\r\n  'API-Version': '2024-01'\r\n};\r\n\r\nexport interface Task {\r\n  id: string;\r\n  name: string;\r\n  effort: number; // in hours\r\n  assignee: string;\r\n  status: string;\r\n  dueDate: string;\r\n  isSubitem: boolean;\r\n  parentId?: string;\r\n  groupId: string;\r\n}\r\n\r\nexport interface Column {\r\n  id: string;\r\n  title: string;\r\n  type: string;\r\n}\r\n\r\nexport interface Group {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\n// Fetch board columns to understand the structure\r\nexport async function fetchBoardColumns(): Promise<Column[]> {\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        columns {\r\n          id\r\n          title\r\n          type\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    console.log('Making API call to Monday.com with headers:', headers);\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    console.log('API response received:', response.status);\r\n    return response.data.data.boards[0].columns;\r\n  } catch (error: any) {\r\n    console.error('Error fetching board columns:', error);\r\n    console.error('Error details:', error.response?.data || error.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Fetch all items from the board\r\nexport async function fetchBoardItems(): Promise<any[]> {\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        items {\r\n          id\r\n          name\r\n          column_values {\r\n            id\r\n            text\r\n            value\r\n            type\r\n          }\r\n          subitems {\r\n            id\r\n            name\r\n            column_values {\r\n              id\r\n              text\r\n              value\r\n              type\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    return response.data.data.boards[0].items;\r\n  } catch (error) {\r\n    console.error('Error fetching board items:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Parse column values to extract effort, assignee, status, and due date\r\nfunction parseColumnValues(columnValues: any[]): { effort: number; assignee: string; status: string; dueDate: string } {\r\n  let effort = 0;\r\n  let assignee = '';\r\n  let status = '';\r\n  let dueDate = '';\r\n\r\n  columnValues.forEach(col => {\r\n    if (col.id === 'numeric_mksee97s' && col.text) {\r\n      // Effort (hours) column\r\n      const effortValue = parseFloat(col.text);\r\n      if (!isNaN(effortValue)) {\r\n        effort = effortValue;\r\n      }\r\n    }\r\n    if (col.id === 'person' && col.value) {\r\n      // Assigned To (people) column\r\n      try {\r\n        const parsed = JSON.parse(col.value);\r\n        if (parsed && parsed.personsAndTeams && parsed.personsAndTeams.length > 0) {\r\n          // Use the first person assigned (or you can join names for multiple assignees)\r\n          assignee = parsed.personsAndTeams[0].name;\r\n        }\r\n      } catch (e) {\r\n        // fallback\r\n        assignee = col.text || '';\r\n      }\r\n    }\r\n    if (col.id === 'status' && col.text) {\r\n      status = col.text;\r\n    }\r\n    if (col.id === 'date4' && col.text) {\r\n      dueDate = col.text;\r\n    }\r\n  });\r\n\r\n  return { effort, assignee, status, dueDate };\r\n}\r\n\r\n// Convert Monday.com items to our Task interface\r\nexport async function fetchTasks(): Promise<Task[]> {\r\n  // Fetch all groups first to get valid group IDs\r\n  const groupQuery = `query { boards(ids: ${BOARD_ID}) { groups { id } } }`;\r\n  let validGroupIds: string[] = [];\r\n  try {\r\n    const groupRes = await axios.post(API_URL, { query: groupQuery }, { headers });\r\n    validGroupIds = groupRes.data.data.boards[0].groups.map((g: any) => g.id);\r\n  } catch (e) {\r\n    // fallback: no group validation\r\n  }\r\n\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        items_page {\r\n          items {\r\n            id\r\n            name\r\n            group { id }\r\n            column_values {\r\n              id\r\n              text\r\n              value\r\n              type\r\n            }\r\n            subitems {\r\n              id\r\n              name\r\n              group { id }\r\n              column_values {\r\n                id\r\n                text\r\n                value\r\n                type\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    const items = response.data.data.boards[0].items_page.items;\r\n    const tasks: Task[] = [];\r\n\r\n    items.forEach((item: any) => {\r\n      // Find subitems with valid effort and assignee\r\n      const validSubitems = (Array.isArray(item.subitems) ? item.subitems : []).filter((subitem: any) => {\r\n        let effort = 0;\r\n        let assignee = '';\r\n        subitem.column_values.forEach((col: any) => {\r\n          if (col.id === 'numeric_mksezpbh' && col.text) {\r\n            const val = parseFloat(col.text);\r\n            if (!isNaN(val)) effort = val;\r\n          }\r\n          if (col.id === 'person' && col.text) {\r\n            assignee = col.text;\r\n          }\r\n        });\r\n        return effort > 0 && assignee;\r\n      });\r\n      if (validSubitems.length > 0) {\r\n        // Only count valid subitems, ignore main item effort\r\n        validSubitems.forEach((subitem: any) => {\r\n          let effort = 0;\r\n          let assignee = '';\r\n          let status = '';\r\n          let dueDate = '';\r\n          subitem.column_values.forEach((col: any) => {\r\n            if (col.id === 'numeric_mksezpbh' && col.text) {\r\n              const val = parseFloat(col.text);\r\n              if (!isNaN(val)) effort = val;\r\n            }\r\n            if (col.id === 'person' && col.text) {\r\n              assignee = col.text;\r\n            }\r\n            if (col.id === 'status' && col.text) {\r\n              status = col.text;\r\n            }\r\n            if (col.id.startsWith('date') && col.text) {\r\n              dueDate = col.text;\r\n            }\r\n          });\r\n          // Subitem inherits parent group if missing or invalid\r\n          let groupId = subitem.group?.id || item.group?.id || '';\r\n          if (!validGroupIds.includes(groupId)) {\r\n            groupId = item.group?.id || '';\r\n          }\r\n          if (effort > 0 && assignee) {\r\n            tasks.push({\r\n              id: subitem.id,\r\n              name: subitem.name,\r\n              effort,\r\n              assignee,\r\n              status,\r\n              dueDate,\r\n              isSubitem: true,\r\n              parentId: item.id,\r\n              groupId,\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        // No valid subitems, use main item effort\r\n        let effort = 0;\r\n        let assignee = '';\r\n        let status = '';\r\n        let dueDate = '';\r\n        item.column_values.forEach((col: any) => {\r\n          if (col.id === 'numeric_mksee97s' && col.text) {\r\n            const val = parseFloat(col.text);\r\n            if (!isNaN(val)) effort = val;\r\n          }\r\n          if (col.id === 'person' && col.text) {\r\n            assignee = col.text;\r\n          }\r\n          if (col.id === 'status' && col.text) {\r\n            status = col.text;\r\n          }\r\n          if (col.id === 'date4' && col.text) {\r\n            dueDate = col.text;\r\n          }\r\n        });\r\n        if (effort > 0 && assignee) {\r\n          tasks.push({\r\n            id: item.id,\r\n            name: item.name,\r\n            effort,\r\n            assignee,\r\n            status,\r\n            dueDate,\r\n            isSubitem: false,\r\n            groupId: item.group?.id || '',\r\n          });\r\n        }\r\n      }\r\n    });\r\n    // Debug: print all extracted tasks\r\n    console.log('Extracted tasks:', JSON.stringify(tasks, null, 2));\r\n    return tasks;\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fetchGroups(): Promise<Group[]> {\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        groups {\r\n          id\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `;\r\n  try {\r\n    console.log('Making API call to fetch groups with headers:', headers);\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    console.log('Groups API response received:', response.status);\r\n    return response.data.data.boards[0].groups;\r\n  } catch (error: any) {\r\n    console.error('Error fetching groups:', error);\r\n    console.error('Error details:', error.response?.data || error.message);\r\n    return [];\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}