{"ast":null,"code":"import axios from'axios';// Monday.com API configuration\nconst API_TOKEN=process.env.REACT_APP_MONDAY_API_TOKEN;const BOARD_ID=process.env.REACT_APP_MONDAY_BOARD_ID||'2038576678';const API_URL='https://api.monday.com/v2';// Debug environment variables\nconsole.log('Environment variables:',{REACT_APP_MONDAY_API_TOKEN:process.env.REACT_APP_MONDAY_API_TOKEN?'SET':'NOT SET',REACT_APP_MONDAY_BOARD_ID:process.env.REACT_APP_MONDAY_BOARD_ID||'NOT SET'});// Validate that API token is available\nif(!API_TOKEN){throw new Error('REACT_APP_MONDAY_API_TOKEN environment variable is required');}const headers={'Authorization':API_TOKEN,'Content-Type':'application/json','API-Version':'2024-01'};// Fetch board columns to understand the structure\nexport async function fetchBoardColumns(){const query=`\n    query {\n      boards(ids: ${BOARD_ID}) {\n        columns {\n          id\n          title\n          type\n        }\n      }\n    }\n  `;try{console.log('Making API call to Monday.com with headers:',headers);const response=await axios.post(API_URL,{query},{headers});console.log('API response received:',response.status);return response.data.data.boards[0].columns;}catch(error){var _error$response;console.error('Error fetching board columns:',error);console.error('Error details:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return[];}}// Fetch all items from the board\nexport async function fetchBoardItems(){const query=`\n    query {\n      boards(ids: ${BOARD_ID}) {\n        items {\n          id\n          name\n          column_values {\n            id\n            text\n            value\n            type\n          }\n          subitems {\n            id\n            name\n            column_values {\n              id\n              text\n              value\n              type\n            }\n          }\n        }\n      }\n    }\n  `;try{const response=await axios.post(API_URL,{query},{headers});return response.data.data.boards[0].items;}catch(error){console.error('Error fetching board items:',error);return[];}}// Parse column values to extract effort, assignee, status, and due date\nfunction parseColumnValues(columnValues){let effort=0;let assignee='';let status='';let dueDate='';columnValues.forEach(col=>{if(col.id==='numeric_mksee97s'&&col.text){// Effort (hours) column\nconst effortValue=parseFloat(col.text);if(!isNaN(effortValue)){effort=effortValue;}}if(col.id==='person'&&col.value){// Assigned To (people) column\ntry{const parsed=JSON.parse(col.value);if(parsed&&parsed.personsAndTeams&&parsed.personsAndTeams.length>0){// Use the first person assigned (or you can join names for multiple assignees)\nassignee=parsed.personsAndTeams[0].name;}}catch(e){// fallback\nassignee=col.text||'';}}if(col.id==='status'&&col.text){status=col.text;}if(col.id==='date4'&&col.text){dueDate=col.text;}});return{effort,assignee,status,dueDate};}// Convert Monday.com items to our Task interface\nexport async function fetchTasks(){// Fetch all groups first to get valid group IDs\nconst groupQuery=`query { boards(ids: ${BOARD_ID}) { groups { id } } }`;let validGroupIds=[];try{const groupRes=await axios.post(API_URL,{query:groupQuery},{headers});validGroupIds=groupRes.data.data.boards[0].groups.map(g=>g.id);}catch(e){// fallback: no group validation\n}const query=`\n    query {\n      boards(ids: ${BOARD_ID}) {\n        items_page {\n          items {\n            id\n            name\n            group { id }\n            column_values {\n              id\n              text\n              value\n              type\n            }\n            subitems {\n              id\n              name\n              group { id }\n              column_values {\n                id\n                text\n                value\n                type\n              }\n            }\n          }\n        }\n      }\n    }\n  `;try{const response=await axios.post(API_URL,{query},{headers});const items=response.data.data.boards[0].items_page.items;const tasks=[];items.forEach(item=>{// Find subitems with valid effort and assignee\nconst validSubitems=(Array.isArray(item.subitems)?item.subitems:[]).filter(subitem=>{let effort=0;let assignee='';subitem.column_values.forEach(col=>{if(col.id==='numeric_mksezpbh'&&col.text){const val=parseFloat(col.text);if(!isNaN(val))effort=val;}if(col.id==='person'&&col.text){assignee=col.text;}});return effort>0&&assignee;});if(validSubitems.length>0){// Only count valid subitems, ignore main item effort\nvalidSubitems.forEach(subitem=>{var _subitem$group,_item$group;let effort=0;let assignee='';let status='';let dueDate='';subitem.column_values.forEach(col=>{if(col.id==='numeric_mksezpbh'&&col.text){const val=parseFloat(col.text);if(!isNaN(val))effort=val;}if(col.id==='person'&&col.text){assignee=col.text;}if(col.id==='status'&&col.text){status=col.text;}if(col.id.startsWith('date')&&col.text){dueDate=col.text;}});// Subitem inherits parent group if missing or invalid\nlet groupId=((_subitem$group=subitem.group)===null||_subitem$group===void 0?void 0:_subitem$group.id)||((_item$group=item.group)===null||_item$group===void 0?void 0:_item$group.id)||'';if(!validGroupIds.includes(groupId)){var _item$group2;groupId=((_item$group2=item.group)===null||_item$group2===void 0?void 0:_item$group2.id)||'';}if(effort>0&&assignee){tasks.push({id:subitem.id,name:subitem.name,effort,assignee,status,dueDate,isSubitem:true,parentId:item.id,groupId});}});}else{// No valid subitems, use main item effort\nlet effort=0;let assignee='';let status='';let dueDate='';item.column_values.forEach(col=>{if(col.id==='numeric_mksee97s'&&col.text){const val=parseFloat(col.text);if(!isNaN(val))effort=val;}if(col.id==='person'&&col.text){assignee=col.text;}if(col.id==='status'&&col.text){status=col.text;}if(col.id==='date4'&&col.text){dueDate=col.text;}});if(effort>0&&assignee){var _item$group3;tasks.push({id:item.id,name:item.name,effort,assignee,status,dueDate,isSubitem:false,groupId:((_item$group3=item.group)===null||_item$group3===void 0?void 0:_item$group3.id)||''});}}});// Debug: print all extracted tasks\nconsole.log('Extracted tasks:',JSON.stringify(tasks,null,2));return tasks;}catch(error){console.error('Error fetching tasks:',error);return[];}}export async function fetchGroups(){const query=`\n    query {\n      boards(ids: ${BOARD_ID}) {\n        groups {\n          id\n          title\n        }\n      }\n    }\n  `;try{console.log('Making API call to fetch groups with headers:',headers);const response=await axios.post(API_URL,{query},{headers});console.log('Groups API response received:',response.status);return response.data.data.boards[0].groups;}catch(error){var _error$response2;console.error('Error fetching groups:',error);console.error('Error details:',((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message);return[];}}","map":{"version":3,"names":["axios","API_TOKEN","process","env","REACT_APP_MONDAY_API_TOKEN","BOARD_ID","REACT_APP_MONDAY_BOARD_ID","API_URL","console","log","Error","headers","fetchBoardColumns","query","response","post","status","data","boards","columns","error","_error$response","message","fetchBoardItems","items","parseColumnValues","columnValues","effort","assignee","dueDate","forEach","col","id","text","effortValue","parseFloat","isNaN","value","parsed","JSON","parse","personsAndTeams","length","name","e","fetchTasks","groupQuery","validGroupIds","groupRes","groups","map","g","items_page","tasks","item","validSubitems","Array","isArray","subitems","filter","subitem","column_values","val","_subitem$group","_item$group","startsWith","groupId","group","includes","_item$group2","push","isSubitem","parentId","_item$group3","stringify","fetchGroups","_error$response2"],"sources":["C:/Users/FredrikHelander/monday-workload-app/frontend/src/api/monday.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Monday.com API configuration\r\nconst API_TOKEN = process.env.REACT_APP_MONDAY_API_TOKEN;\r\nconst BOARD_ID = process.env.REACT_APP_MONDAY_BOARD_ID || '2038576678';\r\nconst API_URL = 'https://api.monday.com/v2';\r\n\r\n// Debug environment variables\r\nconsole.log('Environment variables:', {\r\n  REACT_APP_MONDAY_API_TOKEN: process.env.REACT_APP_MONDAY_API_TOKEN ? 'SET' : 'NOT SET',\r\n  REACT_APP_MONDAY_BOARD_ID: process.env.REACT_APP_MONDAY_BOARD_ID || 'NOT SET'\r\n});\r\n\r\n// Validate that API token is available\r\nif (!API_TOKEN) {\r\n  throw new Error('REACT_APP_MONDAY_API_TOKEN environment variable is required');\r\n}\r\n\r\nconst headers = {\r\n  'Authorization': API_TOKEN,\r\n  'Content-Type': 'application/json',\r\n  'API-Version': '2024-01'\r\n};\r\n\r\nexport interface Task {\r\n  id: string;\r\n  name: string;\r\n  effort: number; // in hours\r\n  assignee: string;\r\n  status: string;\r\n  dueDate: string;\r\n  isSubitem: boolean;\r\n  parentId?: string;\r\n  groupId: string;\r\n}\r\n\r\nexport interface Column {\r\n  id: string;\r\n  title: string;\r\n  type: string;\r\n}\r\n\r\nexport interface Group {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\n// Fetch board columns to understand the structure\r\nexport async function fetchBoardColumns(): Promise<Column[]> {\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        columns {\r\n          id\r\n          title\r\n          type\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    console.log('Making API call to Monday.com with headers:', headers);\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    console.log('API response received:', response.status);\r\n    return response.data.data.boards[0].columns;\r\n  } catch (error: any) {\r\n    console.error('Error fetching board columns:', error);\r\n    console.error('Error details:', error.response?.data || error.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Fetch all items from the board\r\nexport async function fetchBoardItems(): Promise<any[]> {\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        items {\r\n          id\r\n          name\r\n          column_values {\r\n            id\r\n            text\r\n            value\r\n            type\r\n          }\r\n          subitems {\r\n            id\r\n            name\r\n            column_values {\r\n              id\r\n              text\r\n              value\r\n              type\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    return response.data.data.boards[0].items;\r\n  } catch (error) {\r\n    console.error('Error fetching board items:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Parse column values to extract effort, assignee, status, and due date\r\nfunction parseColumnValues(columnValues: any[]): { effort: number; assignee: string; status: string; dueDate: string } {\r\n  let effort = 0;\r\n  let assignee = '';\r\n  let status = '';\r\n  let dueDate = '';\r\n\r\n  columnValues.forEach(col => {\r\n    if (col.id === 'numeric_mksee97s' && col.text) {\r\n      // Effort (hours) column\r\n      const effortValue = parseFloat(col.text);\r\n      if (!isNaN(effortValue)) {\r\n        effort = effortValue;\r\n      }\r\n    }\r\n    if (col.id === 'person' && col.value) {\r\n      // Assigned To (people) column\r\n      try {\r\n        const parsed = JSON.parse(col.value);\r\n        if (parsed && parsed.personsAndTeams && parsed.personsAndTeams.length > 0) {\r\n          // Use the first person assigned (or you can join names for multiple assignees)\r\n          assignee = parsed.personsAndTeams[0].name;\r\n        }\r\n      } catch (e) {\r\n        // fallback\r\n        assignee = col.text || '';\r\n      }\r\n    }\r\n    if (col.id === 'status' && col.text) {\r\n      status = col.text;\r\n    }\r\n    if (col.id === 'date4' && col.text) {\r\n      dueDate = col.text;\r\n    }\r\n  });\r\n\r\n  return { effort, assignee, status, dueDate };\r\n}\r\n\r\n// Convert Monday.com items to our Task interface\r\nexport async function fetchTasks(): Promise<Task[]> {\r\n  // Fetch all groups first to get valid group IDs\r\n  const groupQuery = `query { boards(ids: ${BOARD_ID}) { groups { id } } }`;\r\n  let validGroupIds: string[] = [];\r\n  try {\r\n    const groupRes = await axios.post(API_URL, { query: groupQuery }, { headers });\r\n    validGroupIds = groupRes.data.data.boards[0].groups.map((g: any) => g.id);\r\n  } catch (e) {\r\n    // fallback: no group validation\r\n  }\r\n\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        items_page {\r\n          items {\r\n            id\r\n            name\r\n            group { id }\r\n            column_values {\r\n              id\r\n              text\r\n              value\r\n              type\r\n            }\r\n            subitems {\r\n              id\r\n              name\r\n              group { id }\r\n              column_values {\r\n                id\r\n                text\r\n                value\r\n                type\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  try {\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    const items = response.data.data.boards[0].items_page.items;\r\n    const tasks: Task[] = [];\r\n\r\n    items.forEach((item: any) => {\r\n      // Find subitems with valid effort and assignee\r\n      const validSubitems = (Array.isArray(item.subitems) ? item.subitems : []).filter((subitem: any) => {\r\n        let effort = 0;\r\n        let assignee = '';\r\n        subitem.column_values.forEach((col: any) => {\r\n          if (col.id === 'numeric_mksezpbh' && col.text) {\r\n            const val = parseFloat(col.text);\r\n            if (!isNaN(val)) effort = val;\r\n          }\r\n          if (col.id === 'person' && col.text) {\r\n            assignee = col.text;\r\n          }\r\n        });\r\n        return effort > 0 && assignee;\r\n      });\r\n      if (validSubitems.length > 0) {\r\n        // Only count valid subitems, ignore main item effort\r\n        validSubitems.forEach((subitem: any) => {\r\n          let effort = 0;\r\n          let assignee = '';\r\n          let status = '';\r\n          let dueDate = '';\r\n          subitem.column_values.forEach((col: any) => {\r\n            if (col.id === 'numeric_mksezpbh' && col.text) {\r\n              const val = parseFloat(col.text);\r\n              if (!isNaN(val)) effort = val;\r\n            }\r\n            if (col.id === 'person' && col.text) {\r\n              assignee = col.text;\r\n            }\r\n            if (col.id === 'status' && col.text) {\r\n              status = col.text;\r\n            }\r\n            if (col.id.startsWith('date') && col.text) {\r\n              dueDate = col.text;\r\n            }\r\n          });\r\n          // Subitem inherits parent group if missing or invalid\r\n          let groupId = subitem.group?.id || item.group?.id || '';\r\n          if (!validGroupIds.includes(groupId)) {\r\n            groupId = item.group?.id || '';\r\n          }\r\n          if (effort > 0 && assignee) {\r\n            tasks.push({\r\n              id: subitem.id,\r\n              name: subitem.name,\r\n              effort,\r\n              assignee,\r\n              status,\r\n              dueDate,\r\n              isSubitem: true,\r\n              parentId: item.id,\r\n              groupId,\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        // No valid subitems, use main item effort\r\n        let effort = 0;\r\n        let assignee = '';\r\n        let status = '';\r\n        let dueDate = '';\r\n        item.column_values.forEach((col: any) => {\r\n          if (col.id === 'numeric_mksee97s' && col.text) {\r\n            const val = parseFloat(col.text);\r\n            if (!isNaN(val)) effort = val;\r\n          }\r\n          if (col.id === 'person' && col.text) {\r\n            assignee = col.text;\r\n          }\r\n          if (col.id === 'status' && col.text) {\r\n            status = col.text;\r\n          }\r\n          if (col.id === 'date4' && col.text) {\r\n            dueDate = col.text;\r\n          }\r\n        });\r\n        if (effort > 0 && assignee) {\r\n          tasks.push({\r\n            id: item.id,\r\n            name: item.name,\r\n            effort,\r\n            assignee,\r\n            status,\r\n            dueDate,\r\n            isSubitem: false,\r\n            groupId: item.group?.id || '',\r\n          });\r\n        }\r\n      }\r\n    });\r\n    // Debug: print all extracted tasks\r\n    console.log('Extracted tasks:', JSON.stringify(tasks, null, 2));\r\n    return tasks;\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fetchGroups(): Promise<Group[]> {\r\n  const query = `\r\n    query {\r\n      boards(ids: ${BOARD_ID}) {\r\n        groups {\r\n          id\r\n          title\r\n        }\r\n      }\r\n    }\r\n  `;\r\n  try {\r\n    console.log('Making API call to fetch groups with headers:', headers);\r\n    const response = await axios.post(API_URL, { query }, { headers });\r\n    console.log('Groups API response received:', response.status);\r\n    return response.data.data.boards[0].groups;\r\n  } catch (error: any) {\r\n    console.error('Error fetching groups:', error);\r\n    console.error('Error details:', error.response?.data || error.message);\r\n    return [];\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}